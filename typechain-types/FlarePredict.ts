/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FlarePredictInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BET"
      | "MIN_BET"
      | "PLATFORM_FEE"
      | "RESOLUTION_BUFFER"
      | "calculateOdds"
      | "claimWinnings"
      | "createMarket"
      | "emergencyResolve"
      | "feedMarkets"
      | "getActiveMarketsByFeed"
      | "marketCounter"
      | "markets"
      | "placeBet"
      | "platformTreasury"
      | "positions"
      | "resolveMarket"
      | "totalFeesCollected"
      | "totalVolume"
      | "userMarkets"
      | "withdrawTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyResolution"
      | "MarketCreated"
      | "MarketResolved"
      | "PositionTaken"
      | "WinningsClaimed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_BET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESOLUTION_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOdds",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyResolve",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feedMarkets",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveMarketsByFeed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userMarkets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTreasury",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_BET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESOLUTION_BUFFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveMarketsByFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTreasury",
    data: BytesLike
  ): Result;
}

export namespace EmergencyResolutionEvent {
  export type InputTuple = [marketId: BigNumberish, reason: string];
  export type OutputTuple = [marketId: bigint, reason: string];
  export interface OutputObject {
    marketId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    creator: AddressLike,
    feedId: BytesLike,
    deadline: BigNumberish,
    title: string
  ];
  export type OutputTuple = [
    marketId: bigint,
    creator: string,
    feedId: string,
    deadline: bigint,
    title: string
  ];
  export interface OutputObject {
    marketId: bigint;
    creator: string;
    feedId: string;
    deadline: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketResolvedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    finalValue: BigNumberish,
    totalPayout: BigNumberish,
    platformFee: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    finalValue: bigint,
    totalPayout: bigint,
    platformFee: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    finalValue: bigint;
    totalPayout: bigint;
    platformFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionTakenEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    isYes: boolean,
    amount: BigNumberish,
    newOdds: BigNumberish
  ];
  export type OutputTuple = [
    marketId: bigint,
    user: string,
    isYes: boolean,
    amount: bigint,
    newOdds: bigint
  ];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    isYes: boolean;
    amount: bigint;
    newOdds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinningsClaimedEvent {
  export type InputTuple = [
    marketId: BigNumberish,
    user: AddressLike,
    payout: BigNumberish
  ];
  export type OutputTuple = [marketId: bigint, user: string, payout: bigint];
  export interface OutputObject {
    marketId: bigint;
    user: string;
    payout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlarePredict extends BaseContract {
  connect(runner?: ContractRunner | null): FlarePredict;
  waitForDeployment(): Promise<this>;

  interface: FlarePredictInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BET: TypedContractMethod<[], [bigint], "view">;

  MIN_BET: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  RESOLUTION_BUFFER: TypedContractMethod<[], [bigint], "view">;

  calculateOdds: TypedContractMethod<
    [_marketId: BigNumberish, _isYes: boolean],
    [bigint],
    "view"
  >;

  claimWinnings: TypedContractMethod<
    [_marketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _feedId: BytesLike,
      _type: BigNumberish,
      _threshold: BigNumberish,
      _deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  emergencyResolve: TypedContractMethod<
    [_marketId: BigNumberish, _finalValue: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  feedMarkets: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getActiveMarketsByFeed: TypedContractMethod<
    [_feedId: BytesLike],
    [bigint[]],
    "view"
  >;

  marketCounter: TypedContractMethod<[], [bigint], "view">;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        feedId: string;
        marketType: bigint;
        status: bigint;
        threshold: bigint;
        lowerBound: bigint;
        upperBound: bigint;
        deadline: bigint;
        resolutionTime: bigint;
        totalYesStake: bigint;
        totalNoStake: bigint;
        finalValue: bigint;
        creator: string;
        creatorReward: bigint;
        emergencyResolved: boolean;
      }
    ],
    "view"
  >;

  placeBet: TypedContractMethod<
    [_marketId: BigNumberish, _isYes: boolean],
    [void],
    "payable"
  >;

  platformTreasury: TypedContractMethod<[], [bigint], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, boolean, boolean, bigint] & {
        amount: bigint;
        isYes: boolean;
        claimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  resolveMarket: TypedContractMethod<
    [_marketId: BigNumberish, _finalValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalFeesCollected: TypedContractMethod<[], [bigint], "view">;

  totalVolume: TypedContractMethod<[], [bigint], "view">;

  userMarkets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawTreasury: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESOLUTION_BUFFER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOdds"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _isYes: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<[_marketId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _feedId: BytesLike,
      _type: BigNumberish,
      _threshold: BigNumberish,
      _deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyResolve"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _finalValue: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feedMarkets"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActiveMarketsByFeed"
  ): TypedContractMethod<[_feedId: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "marketCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        title: string;
        description: string;
        feedId: string;
        marketType: bigint;
        status: bigint;
        threshold: bigint;
        lowerBound: bigint;
        upperBound: bigint;
        deadline: bigint;
        resolutionTime: bigint;
        totalYesStake: bigint;
        totalNoStake: bigint;
        finalValue: bigint;
        creator: string;
        creatorReward: bigint;
        emergencyResolved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _isYes: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, boolean, boolean, bigint] & {
        amount: bigint;
        isYes: boolean;
        claimed: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "resolveMarket"
  ): TypedContractMethod<
    [_marketId: BigNumberish, _finalValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalFeesCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userMarkets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawTreasury"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EmergencyResolution"
  ): TypedContractEvent<
    EmergencyResolutionEvent.InputTuple,
    EmergencyResolutionEvent.OutputTuple,
    EmergencyResolutionEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketResolved"
  ): TypedContractEvent<
    MarketResolvedEvent.InputTuple,
    MarketResolvedEvent.OutputTuple,
    MarketResolvedEvent.OutputObject
  >;
  getEvent(
    key: "PositionTaken"
  ): TypedContractEvent<
    PositionTakenEvent.InputTuple,
    PositionTakenEvent.OutputTuple,
    PositionTakenEvent.OutputObject
  >;
  getEvent(
    key: "WinningsClaimed"
  ): TypedContractEvent<
    WinningsClaimedEvent.InputTuple,
    WinningsClaimedEvent.OutputTuple,
    WinningsClaimedEvent.OutputObject
  >;

  filters: {
    "EmergencyResolution(uint256,string)": TypedContractEvent<
      EmergencyResolutionEvent.InputTuple,
      EmergencyResolutionEvent.OutputTuple,
      EmergencyResolutionEvent.OutputObject
    >;
    EmergencyResolution: TypedContractEvent<
      EmergencyResolutionEvent.InputTuple,
      EmergencyResolutionEvent.OutputTuple,
      EmergencyResolutionEvent.OutputObject
    >;

    "MarketCreated(uint256,address,bytes21,uint256,string)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketResolved(uint256,uint256,uint256,uint256)": TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;
    MarketResolved: TypedContractEvent<
      MarketResolvedEvent.InputTuple,
      MarketResolvedEvent.OutputTuple,
      MarketResolvedEvent.OutputObject
    >;

    "PositionTaken(uint256,address,bool,uint256,uint256)": TypedContractEvent<
      PositionTakenEvent.InputTuple,
      PositionTakenEvent.OutputTuple,
      PositionTakenEvent.OutputObject
    >;
    PositionTaken: TypedContractEvent<
      PositionTakenEvent.InputTuple,
      PositionTakenEvent.OutputTuple,
      PositionTakenEvent.OutputObject
    >;

    "WinningsClaimed(uint256,address,uint256)": TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
    WinningsClaimed: TypedContractEvent<
      WinningsClaimedEvent.InputTuple,
      WinningsClaimedEvent.OutputTuple,
      WinningsClaimedEvent.OutputObject
    >;
  };
}
